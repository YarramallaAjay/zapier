generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int          @id @default(autoincrement())
  name     String
  password String
  email    String       @unique
  team_id  Int?
  tokens   TokenStore[]
  team     Team?        @relation(fields: [team_id], references: [id])
  zaps     Zap[]
}

model Zap {
  id          String   @id @default(uuid())
  name        String
  description String
  metadata    Json     @default("{}")
  userId      Int
  triggerId   String
  image       String?
  actions     Action[]
  trigger     Trigger?
  user        User     @relation(fields: [userId], references: [id])
  zapRuns     ZapRun[]
}

model Trigger {
  id          String            @id @default(uuid())
  name        String
  description String
  zapId       String            @unique
  metadata    Json              @default("{}")
  triggerId   String
  type        AvailableTriggers @relation(fields: [triggerId], references: [id])
  zap         Zap               @relation(fields: [zapId], references: [id])
}

model Action {
  id           String           @id @default(uuid())
  name         String
  description  String
  metadata     Json             @default("{}")
  zapId        String
  actionId     String
  sortingOrder Int              @default(0)
  type         AvailableActions @relation(fields: [actionId], references: [id])
  zap          Zap              @relation(fields: [zapId], references: [id])
}

model ZapRun {
  id           String        @id @default(uuid())
  metadata     Json          @default("{}")
  zapId        String
  zap          Zap           @relation(fields: [zapId], references: [id])
  ZapRunOutBox ZapRunOutBox?
}

model AvailableActions {
  id             String   @id @default(uuid())
  name           String
  description    String
  metadata       Json     @default("{}")
  image          String?
  AppId          String   @default(uuid())
  configMetadata Json     @default("{}")
  teamId         Int
  type           String
  actions        Action[]
  App            App      @relation(fields: [AppId], references: [id])
  team           Team     @relation(fields: [teamId], references: [id])
}

model AvailableTriggers {
  id             String    @id @default(uuid())
  name           String
  description    String
  metadata       Json      @default("{}")
  image          String?
  AppId          String    @default(uuid())
  configMetadata Json      @default("{}")
  teamId         Int
  type           String
  App            App       @relation(fields: [AppId], references: [id])
  team           Team      @relation(fields: [teamId], references: [id])
  triggers       Trigger[]
}

model ZapRunOutBox {
  id       String @id @default(uuid())
  zaprunId String @unique
  ZapRun   ZapRun @relation(fields: [zaprunId], references: [id])
}

model App {
  id          String              @id @default(uuid())
  name        String
  description String
  actions     AvailableActions[]
  triggers    AvailableTriggers[]
}

model TokenStore {
  id        Int      @id @default(autoincrement())
  accestoken     String
  refreshtoken    String
  user_id   Int
  createdAt DateTime @default(now())
  provider  String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id])
}

model Team {
  id        Int                 @id @default(autoincrement())
  name      String
  metadata  Json                @default("{}")
  updatedAt DateTime            @updatedAt
  createdAt DateTime            @default(now())
  actions   AvailableActions[]
  triggers  AvailableTriggers[]
  members   User[]
}
